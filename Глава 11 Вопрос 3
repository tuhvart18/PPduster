#include <cassert>
#include <numeric> // для std::midpoint
 
// array - это массив для поиска.
// target - это значение, которое мы пытаемся определить, есть оно или нет.
// min - это индекс нижней границы массива, в котором мы ищем.
// max - это индекс верхней границы массива, в котором мы ищем.
// binarySearch() должна возвращать индекс целевого элемента, если target найден, иначе -1
int binarySearch(const int *array, int target, int min, int max)
{
    assert(array); // убеждаемся, что массив существует
 
    while (min <= max)
    {
        // реализуем это итеративно
        int midpoint{ std::midpoint(min, max) };
        // до C++20
        // такой способ вычисления средней точки позволяет избежать переполнения
        // int midpoint{ min + ((max-min) / 2) };
 
        if (array[midpoint] > target)
        {
            // если array[midpoint] > target, то мы знаем, что число должно быть
            // в нижней половине массива
            // мы можем использовать midpoint - 1 в качестве верхнего индекса,
            // так как нам не нужно повторно тестировать среднюю точку на
            // следующей итерации
            max = midpoint - 1;
        }
        else if (array[midpoint] < target)
        {
            // если array[midpoint] < target, то мы знаем, что число должно быть
            // в верхней половине массива
            // мы можем использовать midpoint + 1 в качестве нижнего индекса,
            // так как нам не нужно повторно тестировать среднюю точку на
            // следующей итерации
            min = midpoint + 1;
        }
        else
        {
            return midpoint;
        }
    }
    
    return -1;
}
